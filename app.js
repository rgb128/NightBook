const BG_PARAMS = {
    width: 1000,
    height: 1000,
    lettersCount: 50,
    backgroundColor: '#000000',
    letterColorMin: 0x10, // Not pure black to be visible
    letterColorMax: 0x20, // Not too bright
    letterSizeMin: 50,
    letterSizeMax: 500,
    letterRotateMinDeg: -90,
    letterRotateMaxDeg: 90,
    letterTransformXMin: 0.5,
    letterTransformXMax: 1.3,
    letterTransformYMin: 0.8,
    letterTransformYMax: 1.2,
    drawBorder: false,
};

// Since we can't read a local file from the browser, we embed the JSON data here.
// This simulates loading 'pixel-letters.json'.
const PIXEL_LETTERS_JSON = {
  "metadata": {
    "font": "bold 100px monospace",
    "smoothing_tolerance": 7,
    "canvas_size": {
      "width": 100,
      "height": 100
    },
    "generated_on": "2025-08-21T13:56:12.868Z"
  },
  "characters": {
    "0": "M44 2 L70 16 L67 68 L44 76 L29 62 L27 23 L43 3 Z M47 15 L41 53 L47 64 L56 60 L58 24 L48 14 Z M46 35 L54 43 L47 34 Z M27 22 Z",
    "1": "M43 3 L58 3 L58 62 L74 63 L74 75 L29 75 L29 63 L45 62 L45 16 L30 18 L30 7 L42 4 Z M37 62 L38 62 Z M59 62 L60 62 Z",
    "2": "M39 2 L70 14 L68 33 L41 62 L71 63 L71 75 L26 75 L57 26 L49 12 L27 18 L27 6 L38 3 Z M42 13 Z M38 14 L39 14 Z M50 14 L51 15 Z M35 15 Z M55 28 L55 29 Z M54 30 L54 31 Z M53 32 L52 33 Z M52 33 Z M51 35 L50 36 Z M50 36 Z M42 62 L43 62 Z",
    "3": "M38 2 L70 13 L58 36 L72 48 L70 67 L26 73 L26 61 L60 57 L54 44 L39 42 L39 31 L58 19 L28 17 L37 3 Z M40 15 L57 19 L40 30 L57 25 L41 14 Z M56 57 L29 61 L55 58 Z M57 19 L56 20 Z M55 46 L56 47 Z M56 47 L56 48 Z",
    "4": "M52 3 L67 3 L75 59 L67 75 L54 75 L53 59 L25 59 L52 4 Z M52 21 L36 47 L53 47 L53 20 Z M68 13 L68 14 Z M53 60 L53 61 Z M68 60 L68 61 Z",
    "5": "M29 3 L68 3 L68 15 L41 15 L40 28 L63 32 L72 45 L63 72 L28 74 L27 61 L59 57 L53 41 L29 42 L29 4 Z M55 57 L29 61 L54 58 Z M41 28 L42 28 Z M40 40 L39 41 Z M54 43 L54 44 Z",
    "6": "M49 2 L69 4 L69 17 L50 13 L39 28 L69 34 L69 69 L44 76 L28 58 L29 19 L48 3 Z M46 41 L44 62 L58 62 L58 43 L47 40 Z M48 2 Z M57 14 L58 14 Z M46 16 L45 17 Z M67 16 Z M41 24 Z M40 28 L40 29 Z",
    "7": "M27 3 L72 3 L47 75 L33 75 L57 16 L27 15 L27 4 Z M49 34 Z M47 39 Z M45 44 Z M44 47 Z M43 49 Z M42 52 Z M41 54 Z M40 57 Z M39 59 Z M38 61 L38 62 Z M37 64 Z M36 66 L36 67 Z M35 69 Z M34 71 L34 72 Z M33 74 Z",
    "8": "M43 2 L70 13 L61 37 L72 48 L69 69 L42 76 L28 65 L27 48 L39 37 L28 17 L42 3 Z M44 45 L41 61 L58 61 L58 47 L45 44 Z M45 15 L43 29 L56 29 L57 17 L46 14 Z M38 37 Z",
    "9": "M41 3 L70 17 L67 66 L30 74 L30 62 L51 65 L60 51 L27 39 L28 13 L40 4 Z M43 15 L41 35 L55 36 L55 16 L44 14 Z M59 46 L58 47 Z M58 53 L58 54 Z M31 62 L32 62 Z M33 63 L34 63 Z M52 63 L51 64 Z M51 64 Z",
    "A": "M41 3 L58 3 L77 72 L64 75 L59 57 L40 57 L35 75 L22 75 L41 4 Z M49 19 L43 45 L56 45 L50 18 Z M59 58 Z M60 61 L60 62 Z M61 65 Z M62 69 Z",
    "B": "M26 3 L70 10 L72 28 L61 37 L76 55 L65 73 L26 75 L26 4 Z M40 44 L40 64 L58 62 L61 50 L40 43 Z M40 15 L40 31 L59 22 L40 14 Z",
    "C": "M50 2 L72 5 L72 20 L48 17 L42 50 L53 64 L72 58 L72 73 L46 75 L29 55 L30 20 L49 3 Z M53 16 L69 19 L54 15 Z M49 2 Z M46 21 L46 22 Z M44 53 L45 54 Z M45 54 L45 55 Z M70 58 L69 59 Z M51 62 Z",
    "D": "M27 3 L62 7 L75 35 L66 68 L27 75 L27 4 Z M41 17 L41 62 L55 59 L60 34 L41 16 Z",
    "E": "M28 3 L73 3 L72 15 L42 16 L43 32 L70 32 L70 43 L42 44 L42 62 L72 63 L73 75 L28 75 L28 4 Z M43 62 L44 62 Z",
    "F": "M29 3 L73 3 L73 15 L42 16 L44 32 L71 32 L71 43 L42 44 L42 75 L29 75 L29 4 Z M43 28 L43 29 Z",
    "G": "M48 2 L70 5 L72 21 L43 21 L42 55 L62 63 L53 37 L74 37 L74 70 L48 76 L29 60 L28 21 L47 3 Z M51 16 L70 20 L52 15 Z M44 57 L60 62 L44 56 Z M58 50 L60 62 L47 61 L62 62 L57 49 Z M47 2 Z M42 26 L42 27 Z",
    "H": "M27 3 L40 3 L41 31 L58 31 L59 3 L73 3 L73 75 L59 75 L58 42 L40 44 L40 75 L27 75 L27 4 Z M58 17 L58 18 Z M42 43 L43 43 Z M58 43 L58 44 Z",
    "I": "M28 3 L71 3 L71 15 L56 16 L56 62 L71 63 L71 75 L28 75 L29 63 L43 62 L43 16 L29 15 L28 4 Z M36 62 L37 62 Z M57 62 L58 62 Z",
    "J": "M37 3 L68 3 L68 60 L53 76 L25 71 L25 56 L45 65 L55 55 L55 16 L37 15 L37 4 Z M54 55 L53 56 Z M53 56 L52 57 Z M27 57 L28 58 Z M28 58 L29 58 Z M45 64 Z",
    "K": "M26 3 L39 3 L40 31 L62 3 L78 3 L55 32 L79 75 L64 75 L46 43 L39 75 L26 75 L26 4 Z M43 47 L41 62 L44 46 Z M61 4 L60 5 Z M60 5 L59 6 Z M59 6 L58 7 Z M58 7 Z M57 9 L56 10 Z M56 10 L55 11 Z M55 11 Z M54 13 L53 14 Z M53 14 L52 15 Z M52 15 L51 16 Z M51 16 Z M50 18 L49 19 Z M49 19 L48 20 Z M48 20 L47 21 Z M47 21 L47 22 Z M46 23 L45 24 Z M45 24 L44 25 Z M44 25 Z M43 27 L42 28 Z M42 28 L41 29 Z M41 29 L40 30 Z M40 30 Z M47 45 Z",
    "L": "M31 3 L44 3 L44 62 L75 63 L75 75 L31 75 L31 4 Z M45 62 L46 62 Z",
    "M": "M24 3 L41 3 L49 33 L58 4 L75 3 L75 75 L64 75 L63 18 L55 48 L44 48 L36 21 L36 75 L24 75 L24 4 Z M57 6 L57 7 Z M56 9 L56 10 Z M55 12 L55 13 Z M54 15 L54 16 Z M53 19 L53 20 Z M63 19 L63 20 Z M37 21 L37 22 Z M52 22 L52 23 Z M40 33 L40 34 Z M41 37 L41 38 Z M42 42 Z",
    "N": "M26 3 L41 4 L61 55 L62 3 L73 3 L73 75 L58 74 L38 23 L37 75 L26 75 L26 4 Z M39 26 Z M40 28 Z M61 30 L61 31 Z M41 31 Z M42 33 Z M43 36 Z M44 39 Z M45 41 Z M46 44 Z M47 46 Z M48 49 Z M50 54 Z M52 59 Z M53 62 Z M54 64 Z M55 67 Z M57 72 Z",
    "O": "M44 2 L72 18 L68 68 L43 76 L27 60 L27 18 L43 3 Z M46 16 L41 56 L57 59 L59 25 L47 15 Z",
    "P": "M28 3 L63 5 L75 20 L72 39 L42 48 L41 75 L28 75 L28 4 Z M42 16 L43 36 L57 34 L60 22 L42 15 Z",
    "Q": "M44 2 L72 18 L74 53 L63 73 L71 82 L62 88 L27 60 L27 18 L43 3 Z M46 16 L41 56 L57 59 L59 25 L47 15 Z M49 77 L50 78 Z",
    "R": "M27 3 L70 11 L71 33 L59 41 L79 75 L64 75 L46 46 L40 75 L27 75 L27 4 Z M41 16 L41 34 L58 22 L41 15 Z M48 49 L59 66 L48 48 Z M41 47 L41 48 Z M59 66 L59 67 Z M60 68 Z M61 70 Z M62 72 Z",
    "S": "M43 2 L69 6 L69 19 L46 13 L39 21 L71 44 L70 68 L27 72 L27 58 L53 65 L60 56 L28 32 L28 13 L42 3 Z M31 60 L47 63 L30 59 Z M41 24 L53 31 L41 23 Z M52 14 L53 14 Z M63 17 L64 17 Z M52 31 L53 31 Z M54 32 Z M43 43 Z M45 44 L46 45 Z M46 45 L47 46 Z M28 58 Z M58 58 L57 59 Z M53 64 Z",
    "T": "M24 3 L75 3 L75 15 L56 16 L56 75 L43 75 L43 16 L25 15 L24 4 Z",
    "U": "M25 3 L39 3 L46 64 L60 58 L61 3 L74 3 L73 61 L57 76 L28 66 L25 4 Z M40 16 L40 17 Z M60 31 L60 32 Z M59 58 L58 59 Z M57 59 L56 60 Z",
    "V": "M23 3 L37 4 L50 62 L62 5 L76 3 L59 75 L40 75 L23 4 Z M61 7 L61 8 Z M60 12 L60 13 Z M59 17 L59 18 Z M58 21 L58 22 Z M57 26 L57 27 Z M56 31 L56 32 Z M55 36 L55 37 Z M54 40 L54 41 Z M53 45 L53 46 Z M46 46 Z M52 50 L52 51 Z M47 51 Z M48 55 L48 56 Z M51 55 L51 56 Z M49 60 L50 61 Z",
    "W": "M20 3 L32 3 L36 52 L44 22 L55 22 L63 55 L67 3 L79 3 L71 75 L58 75 L50 39 L42 74 L29 75 L20 4 Z M20 7 Z M66 9 L66 10 Z M21 15 Z M65 22 L65 23 Z M22 23 Z M43 24 L43 25 Z M42 28 L42 29 Z M41 31 L41 32 Z M64 35 L64 36 Z M50 40 Z M51 44 L51 45 Z M63 48 L63 49 Z M52 49 Z M53 53 L53 54 Z M54 58 Z M55 63 Z M56 67 Z M57 72 Z",
    "X": "M22 3 L36 3 L50 26 L63 3 L77 3 L57 40 L78 75 L64 75 L50 52 L35 75 L22 75 L42 40 L23 4 Z M62 4 Z M60 7 Z M59 9 Z M58 11 Z M55 16 Z M54 18 Z M32 21 Z M33 23 Z M51 23 Z M34 25 L35 26 Z M50 25 Z M35 26 L35 27 Z M36 28 L36 29 Z M37 30 L37 31 Z M38 32 L39 33 Z M39 33 L39 34 Z M40 35 L40 36 Z M41 37 L41 38 Z M39 44 Z",
    "Y": "M21 3 L35 3 L50 32 L64 3 L79 3 L56 47 L56 75 L43 75 L43 46 L21 4 Z M63 4 Z M62 6 Z M61 8 Z M60 10 Z M59 12 Z M58 14 Z M57 16 Z M52 27 Z M51 29 Z M50 31 Z",
    "Z": "M27 3 L75 3 L42 62 L76 63 L76 75 L26 75 L58 16 L27 15 L27 4 Z M43 62 L44 62 Z",
    "a": "M43 20 L70 28 L73 75 L27 69 L31 44 L60 39 L49 29 L30 35 L30 24 L42 21 Z M49 51 L41 64 L56 63 L59 50 L50 50 Z M52 31 L53 32 Z M59 70 L58 71 Z",
    "b": "M27 0 L41 0 L42 28 L62 21 L75 43 L64 75 L27 75 L27 1 Z M48 33 L43 59 L58 61 L60 41 L49 32 Z M42 69 L42 70 Z",
    "c": "M50 20 L70 23 L71 36 L49 32 L43 57 L55 66 L71 60 L71 72 L48 76 L30 61 L30 35 L49 21 Z M46 36 L44 50 L47 35 Z M52 32 L53 32 Z M68 35 L69 35 Z M45 59 L46 60 Z M46 60 L47 61 Z M70 60 L69 61 Z M67 61 L66 62 Z M56 65 L57 65 Z",
    "d": "M59 0 L72 0 L72 75 L34 74 L24 50 L35 22 L59 27 L59 1 Z M45 33 L40 59 L55 61 L57 40 L46 32 Z M57 27 L58 27 Z M58 69 L57 70 Z",
    "e": "M45 20 L69 27 L75 52 L39 59 L73 61 L73 72 L44 76 L28 65 L26 36 L44 21 Z M39 54 L48 65 L69 61 L39 53 Z M46 32 L40 42 L61 41 L47 31 Z M44 20 Z",
    "f": "M55 0 L72 0 L72 10 L55 14 L72 21 L72 31 L55 32 L55 75 L42 75 L42 32 L29 31 L54 1 Z M56 16 L68 20 L56 15 Z M54 0 Z M59 11 L58 12 Z M41 16 L40 17 Z",
    "g": "M41 20 L73 22 L69 88 L31 93 L31 82 L59 78 L58 67 L40 74 L27 62 L26 35 L40 21 Z M44 33 L40 56 L55 60 L57 38 L45 32 Z M56 78 L34 82 L55 79 Z M52 21 L53 21 Z M58 68 L58 69 Z",
    "h": "M28 0 L42 0 L43 27 L60 20 L71 33 L71 75 L58 75 L53 31 L42 38 L42 75 L28 75 L28 1 Z M48 32 L47 33 Z M53 32 L53 33 Z",
    "i": "M31 21 L58 21 L58 64 L76 65 L76 75 L27 75 L27 65 L45 64 L45 32 L31 31 L31 22 Z M45 1 L45 10 L58 10 L58 0 L45 0 Z M36 64 L37 64 Z M59 64 L60 64 Z",
    "j": "M33 21 L60 21 L60 83 L46 96 L27 96 L27 86 L47 79 L47 32 L33 31 L33 22 Z M47 1 L47 10 L60 10 L60 0 L47 0 Z M46 79 L30 85 L45 80 Z M43 80 L42 81 Z",
    "k": "M29 0 L42 0 L43 39 L60 21 L76 21 L56 42 L77 74 L62 75 L47 50 L42 75 L29 75 L29 1 Z M51 30 L50 31 Z M50 31 L49 32 Z M49 32 L48 33 Z M48 33 L47 34 Z M47 34 L46 35 Z M46 35 L45 36 Z M45 36 L44 37 Z M44 37 L43 38 Z M43 38 Z M45 52 L44 53 Z M50 55 Z M53 60 Z M56 65 Z",
    "l": "M24 0 L52 0 L53 60 L72 65 L72 75 L43 70 L39 11 L24 10 L24 1 Z M55 62 L66 64 L55 61 Z M54 60 L55 61 Z",
    "m": "M41 20 L72 23 L75 75 L65 75 L62 30 L55 75 L44 75 L41 30 L35 75 L24 75 L24 21 L40 21 Z M37 32 L36 55 L40 31 L43 49 L38 31 Z M57 32 L57 57 L58 31 Z M34 21 L34 22 Z M49 21 L50 21 Z",
    "n": "M52 20 L70 29 L71 75 L58 75 L53 31 L42 38 L42 75 L28 75 L28 22 L51 21 Z M42 21 L43 22 Z M47 32 L46 33 Z M53 32 L53 33 Z",
    "o": "M45 20 L73 36 L68 69 L43 76 L29 66 L26 37 L44 21 Z M45 33 L40 57 L58 60 L59 39 L46 32 Z",
    "p": "M52 20 L73 33 L70 69 L42 69 L41 95 L27 95 L27 22 L51 21 Z M47 33 L42 56 L58 61 L60 40 L48 32 Z M41 21 L42 22 Z",
    "q": "M40 20 L58 29 L72 21 L72 96 L59 96 L58 68 L38 76 L27 65 L25 37 L39 21 Z M44 33 L40 58 L55 61 L56 37 L45 32 Z M25 36 Z M58 69 L58 70 Z",
    "r": "M62 20 L75 22 L75 35 L49 38 L48 75 L34 75 L34 21 L61 21 Z M59 33 L71 34 L60 32 Z M48 21 L49 22 Z M48 28 Z M48 50 Z",
    "s": "M44 20 L67 23 L67 34 L41 37 L68 49 L69 69 L29 73 L29 62 L59 61 L29 42 L43 21 Z M50 31 L63 33 L51 30 Z M43 62 L57 63 L44 61 Z M43 38 Z M45 39 L46 39 Z M47 40 L48 40 Z M50 41 Z M53 42 Z M49 54 L50 55 Z M50 55 L51 55 Z",
    "t": "M39 6 L53 6 L54 21 L71 21 L71 31 L53 32 L53 61 L71 65 L71 75 L46 73 L39 32 L25 31 L39 7 Z M38 8 L38 9 Z M54 61 L55 62 Z M55 62 L56 63 Z",
    "u": "M28 21 L41 21 L48 66 L57 59 L58 21 L71 21 L71 75 L57 68 L48 76 L29 67 L28 22 Z M42 30 L42 31 Z M57 40 L57 41 Z M56 59 L55 60 Z M55 60 L54 61 Z",
    "v": "M24 21 L38 22 L50 63 L61 22 L75 21 L58 75 L41 75 L24 22 Z M24 23 Z M60 24 L60 25 Z M25 26 Z M59 28 L59 29 Z M26 29 Z M58 31 L58 32 Z M57 35 L57 36 Z M56 39 L56 40 Z M55 42 L55 43 Z M54 46 L54 47 Z M32 48 Z M53 50 L53 51 Z M33 51 Z M47 54 Z M52 54 Z M51 57 L51 58 Z M49 61 L50 62 Z",
    "w": "M20 21 L31 21 L38 62 L44 36 L55 36 L61 62 L68 21 L79 21 L69 75 L56 74 L50 48 L43 75 L30 75 L20 22 Z M20 24 Z M67 24 L67 25 Z M21 29 Z M66 30 L66 31 Z M65 36 L65 37 Z M43 38 L43 39 Z M64 42 L64 43 Z M42 43 Z M41 47 L41 48 Z M63 48 L63 49 Z M50 49 Z M40 51 L40 52 Z M62 53 L62 54 Z M39 56 L39 57 Z M52 58 Z M61 59 L61 60 Z M38 60 L38 61 Z M53 62 Z M54 66 Z M55 71 Z",
    "x": "M25 21 L40 21 L49 37 L59 21 L74 21 L57 48 L76 75 L61 75 L50 57 L39 75 L23 75 L43 47 L25 22 Z M58 22 L57 23 Z M57 23 Z M56 25 Z M55 27 L54 28 Z M54 28 L54 29 Z M53 30 L52 31 Z M51 33 L51 34 Z M50 35 L49 36 Z M41 49 Z M38 53 Z M36 56 Z M33 60 Z M31 63 Z M28 67 Z M26 70 Z M23 74 Z",
    "y": "M23 21 L37 21 L50 56 L62 21 L76 21 L53 84 L39 96 L26 96 L44 74 L23 22 Z M61 22 L61 23 Z M24 25 Z M60 25 L60 26 Z M59 28 L59 29 Z M26 30 Z M58 31 L58 32 Z M57 34 L57 35 Z M56 37 L56 38 Z M55 40 L55 41 Z M54 43 L54 44 Z M53 46 L53 47 Z M52 49 L52 50 Z M51 52 L51 53 Z M50 55 Z M42 76 L41 77 Z",
    "z": "M29 21 L72 21 L44 64 L72 65 L72 75 L28 75 L56 32 L29 31 L29 22 Z M54 34 Z M45 64 L46 64 Z",
    "!": "M44 3 L56 3 L54 51 L45 51 L44 4 Z M44 63 L44 75 L56 75 L56 63 L44 62 Z",
    "?": "M44 2 L71 15 L54 55 L41 49 L57 16 L31 19 L31 7 L43 3 Z M41 63 L41 75 L54 75 L54 63 L42 62 Z M42 15 L54 15 L43 14 Z M32 6 Z M56 17 L56 18 Z M34 18 Z M50 30 Z M61 36 L60 37 Z M60 37 L59 38 Z M41 48 Z",
    "@": "M49 8 L73 18 L76 68 L51 69 L40 58 L44 33 L67 32 L55 16 L32 31 L31 64 L45 80 L71 78 L75 86 L48 90 L24 70 L23 30 L48 9 Z M53 39 L51 57 L65 56 L64 40 L54 38 Z M65 78 L50 80 L64 79 Z M50 17 L49 18 Z M57 18 L58 19 Z M35 28 Z M66 32 Z M31 37 L31 38 Z M66 66 L65 67 Z M34 68 L35 69 Z M35 69 L35 70 Z M38 73 L39 74 Z M39 74 L40 75 Z M40 75 L41 76 Z M41 76 L42 77 Z M42 77 Z",
    "#": "M44 4 L53 4 L50 23 L74 4 L70 22 L79 23 L64 43 L73 57 L60 59 L57 74 L47 75 L51 58 L41 57 L36 75 L26 75 L30 58 L20 57 L36 36 L26 23 L39 22 L43 5 Z M47 34 L44 46 L53 46 L56 33 L47 33 Z M42 7 L42 8 Z M41 11 L41 12 Z M61 14 L60 15 Z M40 16 Z M39 20 Z M33 22 L34 22 Z M71 22 L72 22 Z M34 33 L35 34 Z M68 33 L68 34 Z M34 38 L33 39 Z M66 39 Z M65 45 L65 46 Z M62 58 Z M29 60 Z",
    "$": "M47 0 L68 15 L68 26 L53 22 L53 36 L72 51 L53 90 L46 75 L28 70 L28 59 L47 64 L47 49 L28 34 L47 1 Z M45 23 L46 35 L46 22 Z M54 6 L63 12 L54 5 Z M46 2 L46 3 Z M40 12 Z M55 22 Z M59 23 L60 23 Z M62 24 L63 24 Z M54 50 L54 51 Z M32 60 L33 60 Z M34 61 L35 61 Z M58 75 L57 76 Z",
    "%": "M59 45 L76 51 L76 69 L50 68 L58 46 Z M32 7 L24 30 L50 29 L49 12 L33 6 Z M60 55 L59 65 L69 63 L61 54 Z M34 16 L31 24 L42 25 L35 15 Z M74 28 L25 48 L73 29 Z M70 29 L71 29 Z M68 30 Z M65 31 L66 31 Z M63 32 Z M61 33 Z M58 34 Z M56 35 Z M53 36 Z M51 37 Z M48 38 Z M43 40 Z M38 42 Z",
    "&": "M44 2 L64 4 L64 15 L48 12 L44 21 L65 54 L68 40 L78 40 L79 75 L39 76 L24 65 L31 13 L43 3 Z M39 42 L37 59 L55 63 L40 41 Z M43 2 Z M56 13 L57 13 Z M46 14 L45 15 Z M45 15 L45 16 Z M30 17 L30 18 Z M67 42 L67 43 Z M77 55 L77 56 Z M61 73 L60 74 Z M57 75 L58 75 Z"
  }
};


/**
 * Helper function to generate a random floating-point number in a given range.
 */
function getRandomValue(min, max) {
    return Math.random() * (max - min) + min;
}

/**
 * Generates a background image using custom SVG paths from JSON.
 * Implements seamless horizontal and vertical tiling.
 * @returns {string} The full CSS 'background-image' property value.
 */
function generateBackground() {
    // 1. Create canvas and get context
    const canvas = document.createElement('canvas');
    canvas.width = BG_PARAMS.width;
    canvas.height = BG_PARAMS.height;
    const ctx = canvas.getContext('2d');

    // Fill with background color
    ctx.fillStyle = BG_PARAMS.backgroundColor;
    ctx.fillRect(0, 0, canvas.width, canvas.height);
    
    // Get the list of available characters from the JSON data
    const availableChars = Object.keys(PIXEL_LETTERS_JSON.characters);
    // Get the original canvas size from metadata to center the paths correctly
    const sourceCanvasSize = PIXEL_LETTERS_JSON.metadata.canvas_size;

    // 2. Add lettersCount letters
    for (let i = 0; i < BG_PARAMS.lettersCount; i++) {
        // --- Generate random properties for each letter ---
        const charKey = availableChars[Math.floor(Math.random() * availableChars.length)];
        const pathData = PIXEL_LETTERS_JSON.characters[charKey];
        if (!pathData) continue; // Skip if path data is missing for some reason

        const x = getRandomValue(0, canvas.width);
        const y = getRandomValue(0, canvas.height);
        
        const colorVal = Math.floor(getRandomValue(BG_PARAMS.letterColorMin, BG_PARAMS.letterColorMax));
        const letterColor = `rgb(${colorVal}, ${colorVal}, ${colorVal})`;

        const size = getRandomValue(BG_PARAMS.letterSizeMin, BG_PARAMS.letterSizeMax);
        const rotationRad = getRandomValue(BG_PARAMS.letterRotateMinDeg, BG_PARAMS.letterRotateMaxDeg) * Math.PI / 180;
        const scaleX = getRandomValue(BG_PARAMS.letterTransformXMin, BG_PARAMS.letterTransformXMax);
        const scaleY = getRandomValue(BG_PARAMS.letterTransformYMin, BG_PARAMS.letterTransformYMax);

        // Create a Path2D object from the SVG path string
        const path2d = new Path2D(pathData);
        ctx.fillStyle = letterColor;

        // --- 3. FIX: Implement seamless tiling by drawing each letter 9 times ---
        // This ensures parts that go off any edge appear on the opposite edge.
        for (let tileY = -1; tileY <= 1; tileY++) {
            for (let tileX = -1; tileX <= 1; tileX++) {
                ctx.save();
                
                // Position the letter in the correct tile
                ctx.translate(x + tileX * canvas.width, y + tileY * canvas.height);
                
                // Apply transformations (rotation and scaling)
                ctx.rotate(rotationRad);
                ctx.scale(scaleX, scaleY);

                // Apply overall size, scaling relative to the source path's canvas size (100x100)
                const baseScale = size / sourceCanvasSize.width;
                ctx.scale(baseScale, baseScale);

                // **Crucially, translate to center the path object itself before drawing**
                ctx.translate(-sourceCanvasSize.width / 2, -sourceCanvasSize.height / 2);
                
                // Draw the path
                ctx.fill(path2d);

                ctx.restore();
            }
        }
    }

    // 4. If drawBorder is true, draw a border
    if (BG_PARAMS.drawBorder) {
        ctx.strokeStyle = 'red';
        ctx.lineWidth = 5;
        ctx.strokeRect(2.5, 2.5, canvas.width - 5, canvas.height - 5);
    }

    // 7. Return the base64 png value formatted for CSS
    const base64Image = canvas.toDataURL('image/png');
    return `url('${base64Image}')`;
}

document.body.style.backgroundImage = generateBackground();
